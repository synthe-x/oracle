import { expect } from "chai";
import { HardhatRuntimeEnvironment } from "hardhat/types";

import {
  ConfigNames,
  getMockPool,
  getMockL2Pool,
  getPythOracle,
  ICommonConfiguration,
  L2_POOL_IMPL_ID,
  loadPoolConfig,
  getPool,
  getWrappedTokenGateway,
  ZERO_ADDRESS,
  oneEther,
  WRAPPED_NATIVE_TOKEN_PER_NETWORK,
  getMockStableDebtToken,
  WrappedTokenGatewayV3,
  Pool,
  MockAToken,
  MockToken,
  getWETH,
  getAToken,
  getPoolAddressesProvider,
  ATOKEN_IMPL_ID,
  POOL_ADDRESSES_PROVIDER_ID,
  getAaveProtocolDataProvider,

} from "../../helpers";

import {
  getEthersSigners,
  getFirstSigner,
} from "../../helpers/utilities/signer";
import { waitForTx } from "../../helpers/utilities/tx";
import { parseEther } from "ethers/lib/utils";
import { EvmPriceServiceConnection } from "@pythnetwork/pyth-evm-js"
import { ethers } from "hardhat";
import { BaseContract, Contract, Signer } from "ethers";
import { execPath } from "process";
// Prevent error HH9 when importing this file inside tasks or helpers at Hardhat config load
declare var hre: HardhatRuntimeEnvironment;
let pool: Pool, usdc: MockToken, wrapper: WrappedTokenGatewayV3;
let poolConfig: ICommonConfiguration;
let deployer: Signer, user: Signer, user2: Signer, user3: Signer, user4: Signer;
let priceFeedUpdateData: string[];
describe("Testing Oracles", function () {


  before(async () => {
    expect(process.env.MARKET_NAME).equal("Mantle");

    await hre.deployments.fixture(["market", "periphery-post", "after-deploy"]);

    deployer = await getFirstSigner();

    poolConfig = loadPoolConfig((process.env.MARKET_NAME || "") as ConfigNames);

    [, , user, user2, user3, user4] = await getEthersSigners();

    const pythPriceService = new EvmPriceServiceConnection('https://xc-testnet.pyth.network');

    // priceFeedUpdateData = await pythPriceService.getPriceFeedsUpdateData([
    //   "0x41f3625971ca2ed2263e78573fe5ce23e13d2558ed3f2e47ab0f84fb9e7ae722",
    //   "0x0e9ec6a3f2fba0a3df73db71c84d736b8fc1970577639c9456a2fee0c8f66d93",
    //   "0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6",
    //   "0x1fc18861232290221461220bd4e2acd1dcdfbc89c84092c93c18bdc7756c1588",
    //   "0xecf553770d9b10965f8fb64771e93f5690a182edc32be4a3236e0caaa6e0581a",
    //   "0xf9c0172ba10dfa4d19088d94f5bf61d3b54d5bd7483a322a982e1373ee8ea31b",
    //   "0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6",
    //   "0xbfaf7739cb6fe3e1c57a0ac08e1d931e9e6062d476fa57804e165ab572b5b621",
    //   "0xafcc9a5bb5eefd55e12b6f0b4c8e6bccf72b785134ee232a5d175afd082e8832",
    //   "0xa29b53fbc56604ef1f2b65e89e48b0f09bb77b3fb890f4c70ee8cbd68a12a94b",
    //   "0xabb1a3382ab1c96282e4ee8c847acc0efdb35f0564924b35f3246e8f401b2a3d",
    //   "0x4e10201a9ad79892f1b4e9a468908f061f330272c7987ddc6506a254f77becd7",
    // ]);
    priceFeedUpdateData = ["0x010000000001007013f0e3845e5800766f2878ebc3b1635ccd5d4774635d4ad9e233efb158082d3aacd296075d7dab554b93467a0fe30107131eff10e52c809df0a5d9e508a4d60064a6c66100000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074415d60150325748000300010001020005009dc8ea92a27d0cf8e5612b9c1706ebc8e2dfe2ebc60b24dfb075bd3180d2582a3872fe21b4ba5661f194b5f17bfadcc59eddd3e0e53198d040e5091c6dfb558108000000000233d99f0000000000006f05fffffff80000000002375b0e00000000000062330100000002000000020000000064a6c6610000000064a6c6610000000064a6c661000000000233d99f0000000000006f050000000064a6c65b0e3f75dce597f476235d6fe2ac8254b1cbeaaf6e35565529e80c19c09655ebef44b948f5d3f5ad7e24e1aacca13872c1bd5ebcc106a44cc70a0f4c6aec2c564a00000000012e0b8800000000000023e0fffffff800000000012fcf8100000000000026b30100000002000000020000000064a6c6610000000064a6c6610000000064a6c65f00000000012e0b9e00000000000023f60000000064a6c65e13403d93eb1a99c91fa0735466355f1ba0a2221e9ca56492afcaf4ffed9e62eb0e9ec6a3f2fba0a3df73db71c84d736b8fc1970577639c9456a2fee0c8f66d930000000002bf52c3000000000000deb2fffffff80000000002c1bb32000000000000c8850100000002000000020000000064a6c6610000000064a6c6610000000064a6c6600000000002bfb46d0000000000007d070000000064a6c65e4114421c35fea552cb1c15b8e680535270464a87a84507c8db243ee32b8b26dd0d10b9ccdc9af1d65cd4bafabf4e34db01c0ce83abba190230eaf26d7592cd210000000000ca1d8600000000000020e3fffffff80000000000cb0442000000000000218c0100000002000000020000000064a6c6610000000064a6c6610000000064a6c65f0000000000ca1d8600000000000020e30000000064a6c65f06486bdc469c39923000417f512f8fa80cb4d930e9a2306bf9d48c333315fa0a4193915dc8d03bc15603ec3c0ca9c5e3eff6726c2a2cf262e30be121c2b9a2060000000018418e610000000000043dc0fffffff800000000187dc7b600000000000360e60100000002000000020000000064a6c6610000000064a6c6610000000064a6c661000000001841ac490000000000045ba80000000064a6c65d", "0x010000000001006a9c5cd0bad3b3cb09b69ea1a30303533d576a5b88dd695c228e0d14619b10a62841434142edfed7ba99bdf871cb941a266afacf89a1223cd3dc0b24e74cc1480164a6c66400000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074416060150325748000300010001020005009d431cc2fd0ef4af4bc7c85fffae2f63d51b26d162179682d149ae619b1221c00bfc309467defa4b198c6b5bd59c08db4b9dfb27ddbcc32f31560f217b4ff8fc2b0000002c3747988000000000080befc0fffffff80000002c5d88a7f0000000000587fdff0100000002000000020000000064a6c6640000000064a6c6630000000064a6c6630000002c3747988000000000080befc00000000064a6c663f42aaf884c7b1454894170be0aaf1db39b4b78d3a56a27fd49bd8b39ef2c33d7651071f8c7ab2321b6bdd3bc79b94a50841a92a6e065f9e3b8b9926a8fb5a5d10000002e007a2320000000000a576660fffffff80000002e2be5efa8000000000955de060100000002000000020000000064a6c6640000000064a6c6630000000064a6c6630000002e007a2320000000000a5766600000000064a6c6631801eb03803af0244523ee2a86c3f27b126abe8904db4b45a82adb5fe21708b4ca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a60000002c3dcf460300000000030368c2fffffff80000002c68184cc0000000000355059a0100000002000000020000000064a6c6640000000064a6c6630000000064a6c6620000002c3e319d80000000000365c03f0000000064a6c6627ddf0d82af531f0af109d5e9ce9ec27ba9f00e9ee8ab71c912afffa16d715836b7abd25a76ddaffdf847224f03198ccb92723f90b2429cf33f0eecb96e352a860000002c33d26fd1000000000bbdd510fffffff80000002c5f318590000000000bead6550100000002000000020000000064a6c6640000000064a6c6630000000064a6c6620000002c33d26fd1000000000bbdd5100000000064a6c663d5a5c2f30e06bd6f38e01c2c4c8cdd7ca7c1c12d47a7336e459fc6db4171bae660fd61b2d90eba47f281505a88869b66133d9dc58f203b019f5aa47f1b39343e0000002d2366ea1a0000000022b037f9fffffff80000002d21b4c3980000000022aefd900100000001000000020000000064a6c664000000006447fcf2000000006447fcf00000002d2366ea1a0000000022b037f9000000006447fcf2", "0x01000000000100f9a86c7ee74856e150b87587cce5ed6ffa66a58a2ba6e9fc8fef45d9b8ef062d2388c1f578100c2b0376cb59822f84c351437de6691a9f002a33721a647479b10164a6c66400000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074416070150325748000300010001020005009d1cdb1a5e1e3456d2977ee0d3d70765239f08a42855b9508fd479e15c6dc4d1feecf553770d9b10965f8fb64771e93f5690a182edc32be4a3236e0caaa6e0581a000000058e8ea63a000000000093b3cafffffff8000000059344ee5c0000000000976a460100000002000000020000000064a6c6640000000064a6c6630000000064a6c663000000058e8ea63a000000000093b3ca0000000064a6c6636a20671c0e3f8cb219ce3f46e5ae096a4f2fdf936d2bd4da8925f70087d51dd830029479598797290e3638a1712c29bde2367d0eca794f778b25b5a472f192de000000069aad63bc0000000000858a54fffffff800000006af4bf3100000000000a7ac4f0100000002000000020000000064a6c6640000000064a6c6630000000064a6c663000000069aad63bc0000000000858a540000000064a6c66328fe05d2708c6571182a7c9d1ff457a221b465edf5ea9af1373f9562d16b8d15f9c0172ba10dfa4d19088d94f5bf61d3b54d5bd7483a322a982e1373ee8ea31b000002c6e6ba4ff0000000003761a619fffffff8000002ca5c486e2000000000315ed4aa0100000002000000020000000064a6c6640000000064a6c6630000000064a6c663000002c6d443e700000000002fbe4a400000000064a6c6628b38db700e8b34640e681ec9a73e89608bda29415547a224f96585192b4b9dc794bce4aee88fdfa5b58d81090bd6b3784717fa6df85419d9f04433bb3d615d5c00000000049ae8c40000000000004636fffffff80000000004a3e85600000000000079f10100000002000000020000000064a6c6640000000064a6c6630000000064a6c66200000000049ae75a00000000000047a00000000064a6c6623b69a3cf075646c5fd8148b705b8107e61a1a253d5d8a84355dcb628b3f1d12031775e1d6897129e8a84eeba975778fb50015b88039e9bc140bbd839694ac0ae0000000000652daf0000000000000d03fffffff8000000000065bbca00000000000009d50100000002000000020000000064a6c6640000000064a6c6630000000064a6c6620000000000652fdb0000000000000a4f0000000064a6c662", "0x01000000000100944bb98b6fb1d450e2e18e1b7210d00dc70fc40c3d8dd425a9dd4ad557806b8b088eb0fd3bd0abaa4514fef24941ca91a797159eb6b7746e0caa5b3bf69bfbca0064a6c66400000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074416240150325748000300010001020005009d41b0bf6e145a9f1296879040f2822fb5896addc7fbd4c1d94806e98f144f6d3a672fbb7d9ec665cfbe8c2ffa643ba321a047b7a72d7b6d7c3d8fb120fc40954b000000000001237b0000000000000050fffffff6000000000001250a000000000000005e0100000002000000020000000064a6c6640000000064a6c6630000000064a6c6610000000000012381000000000000004a0000000064a6c663230abfe0ec3b460bd55fc4fb36356716329915145497202b8eb8bf1af6a0a3b9fe650f0367d4a7ef9815a593ea15d36593f0643aaaf0149bb04be67ab851decd0000000074ffc61c00000000000b6c03fffffff80000000075de620800000000000b51b00100000002000000020000000064a6c6640000000064a6c6630000000064a6c6630000000074fb287800000000000a31300000000064a6c66382871a5b7bb78bc20c25f6ed8a82f27ad8854884659201e0662cb47f5a5a0db350c67b3fd225db8912a424dd4baed60ffdde625ed2feaaf283724f9608fea2660000000003ebe7ba00000000000057cefffffff80000000003ef1a1300000000000069780100000002000000020000000064a6c6640000000064a6c6640000000064a6c6630000000003ebe0da00000000000050ee0000000064a6c663d1ff89ed8e67dfc99d6c6bd3e2cf47db21900c98f5a239fe21e59480a8da0e6b64ae1fc7ceacf2cd59bee541382ff3770d847e63c40eb6cf2413e7de5e93078a000000002029748d000000000006adddfffffff80000000020687034000000000005ba450100000002000000020000000064a6c6640000000064a6c6630000000064a6c663000000002028e09a00000000000619ea0000000064a6c6634fe17ca403512d0003bfb1993de595e2dc3a01977935b0ec7718e98ba5ad0a9541f3625971ca2ed2263e78573fe5ce23e13d2558ed3f2e47ab0f84fb9e7ae7220000000005f5e88500000000000055a5fffffff80000000005f5e96e000000000000531a0100000002000000020000000064a6c6640000000064a6c6630000000064a6c6620000000005f5e88500000000000055a50000000064a6c663", "0x0100000000010058845c7bc12c92d3fa0b2d1b3493b12145f35393fb5e24dec0aa5b84c42c6dc2393a69676df2b2d81ed6bc49289283b34620d41ea5e18b24601e34056b10c1070064a6c66000000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074415b70150325748000300010001020004009d515127ff2583dbec558399c817eb3905a0df2407dc833adf0f348bc70ddd352d013317758a5b499650d72edcd7ba12bb5cc54ce9434196b607fa5e01e0f7797b000000000076cd8d00000000000006cbfffffff8000000000076eee800000000000007cb0100000002000000020000000064a6c6600000000064a6c65f0000000064a6c65e000000000076cd3600000000000006800000000064a6c65ad4031717274322b25c6644095d018cdcae659adc39c29bf947e768cd1bb460fce76e307abc63a0fe6a6cd8bec83a23997aae27b5a91459c3d73b2cf20abf7430000000000c89092f000000000003c2b5fffffff8000000000c3bdfc40000000000026a130100000001000000020000000064a6c6600000000064a6c65f0000000064a6c65e000000000c89afb00000000000033a740000000064a6c65ab1a29449173b4103c6ee193a4e008c0ecc3259d1d2e12d75641f64885dfea15ea7e2e2f7d47b17d18e6d49c427f21fb30c0a85e621a8502c3c4e486f3ab543c800000003e1e4ce690000000000ef6e93fffffff800000003e5f805f000000000010d460b0100000001000000020000000064a6c6600000000064a6c65f0000000064a6c65f00000003e1ec1cbd0000000000f8f4ee0000000064a6c65acc4622b8c9bba42dce69b56681961a6037b19c391aedabd25d9170cf53b8e7f4bfaf7739cb6fe3e1c57a0ac08e1d931e9e6062d476fa57804e165ab572b5b6210000000002d0bef10000000000005d33fffffff80000000002d34e0000000000000039f90100000002000000020000000064a6c6600000000064a6c65f0000000064a6c65e0000000002d0bfdf0000000000003bf40000000064a6c65a", "0x01000000000100fa4bc4cefdd2165d7a5a8e548db093bb3fe19c1cba69a325629979a7112c176f45aa834816c721efef0c234e296c7d595f65d837454216d34b2a24a23b15160a0064a6c66400000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b6000000000744161f0150325748000300010001020005009d66ac1408034f847dcc2be84f6d5ed5ed4ceb413b0c49be6245ec8bdef955328c475a251c7cbded7645a146fc049d44058aa977e6850f20f4c86e289fb8dbe4f800000000005818310000000000000667fffffff80000000000584c460000000000000ac60100000002000000020000000064a6c6640000000064a6c6630000000064a6c662000000000058168b000000000000080d0000000064a6c65e34ba2d2fe3a49084d21c2aec1082821aa343f56d42b87249c08989cba53a2d1136032e522b810babd8e3148e9f0d588af9e95e93b97ffb58566b837fdbd31f7f000000001edf4a300000000000055730fffffff8000000001ef924d2000000000003d63c0100000002000000020000000064a6c6640000000064a6c6640000000064a6c663000000001edf6c0a000000000005790a0000000064a6c65f24e950ae2a141bfe17d5c4998b0e5f5f80cbaef09dfd587393ef0795551d46a95a035d5440f5c163069af66062bac6c79377bf88396fa27e6067bfca8096d28000000000008d712100000000000055effffffff800000000008d9302000000000000a35a0100000001000000020000000064a6c6640000000064a6c6630000000064a6c65f00000000008d712100000000000055ef0000000064a6c65f69ba524f08c36cf76e84b4762d8d5d9b7660e0cde4204da2a4d3a46657f52275570b0d8b1874762f45775332a23e7c153c0db9cd77e574ae5f698453a26ca593000000000116a790000000000000703bfffffff8000000000119153200000000000052c80100000001000000020000000064a6c6640000000064a6c6610000000064a6c65f000000000116a76f00000000000070020000000064a6c65dd8f4c444e9d9dac6ce93c79e93837a88b32a6b8615367f3361dcdfae1bb3fcf1ac541125cba1f87cd7048ed465faaca653784605e05fc1ee90b979f0a4eb57a200000000261122f200000000000b6fd0fffffff800000000262b9fbe00000000000ae9460100000001000000020000000064a6c6640000000064a6c6630000000064a6c66200000000261122f200000000000afa590000000064a6c65e", "0x01000000000100969a57778b1d92c0aa9dbfdd93d9c2c247d64ce3991d09a0e93c5ab0ef6136a754d92386693e1f2e9c61432e6148a997467ad4934504e2663940127d47d00cd20064a6c66400000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074416170150325748000300010001020005009d7b0b1a58a54e5aa24e28f2311acf9edcb4689f22bac65d131249870040176185d6b3bc030a8bbb7dd9de46fb564c34bb7f860dead8985eb16a49cdc62f8ab3a500000001b75f263f00000000004c7f8efffffff800000001bb72e8d800000000003e7eaa0100000002000000020000000064a6c6640000000064a6c6630000000064a6c66200000001b7688512000000000051cd950000000064a6c6621dc9fc22544655b453008cc68559639a8f74d584d94f84ac945b36c957afd9db73dc009953c83c944690037ea477df627657f45c14f16ad3a61089c5a3f9f4f20000000001b2e1e10000000000007116fffffff80000000001b532aa000000000000634d0100000002000000020000000064a6c6640000000064a6c6630000000064a6c6630000000001b2e1e100000000000071160000000064a6c66317222352da167878654cb84119be343ef62b079f85528d4b079da396c497812ecb1743d0e3e3eace7e84b8230dc082829813e3ab04e91b503c08e9a441c0ea8b000000000c44633b000000000001b1e6fffffff8000000000c52358700000000000215d00100000002000000020000000064a6c6640000000064a6c6630000000064a6c662000000000c44759b0000000000017bf50000000064a6c662eaa4bdf732d22d3487eb6e023fea350a31a24c0c7ccbedb3fbd48c8e390307b844a93dddd8effa54ea51076c4e851b6cbbfd938e82eb90197de38fe8876bb66e000000002beae9b1000000000007646ffffffff8000000002c2c140c000000000005298e0100000002000000020000000064a6c6640000000064a6c6640000000064a6c663000000002beafdc1000000000007505f0000000064a6c6632fcc153fe438323a56df1aba9b3fbf91e96f428f4511434ed8e7360757ecdc5737f40d2898159e8f2e52b93cb78f47cc3829a31e525ab975c49cc5c5d9176378000000000696db94000000000000de4bfffffff80000000006a113df000000000000a74b0100000002000000020000000064a6c6640000000064a6c6630000000064a6c663000000000696be48000000000000c0ff0000000064a6c663", "0x01000000000100f564998cf81caff6ea4eeab0f88e4206b5f7b9610de6108ac1bec4f40caa87a34db3e82f3c8753f7cc5662c8f2367da1f012b60214f12db76c7015a476ef18980164a6c66300000000001aa27839d641b07743c0cb5f68c51f8cd31d2c0762bec00dc6fcd25433ef1ab5b600000000074416040150325748000300010001020005009da4e3d0e3c6ce21c490b09a81b299eecff9d5cb383b10b3a697ed0f46a49904a84b57c2471f6ab9250d26b7e0ff8807bfd620a609503f52b0b67645f69eb2d5c5000000014b5cdcf4000000000030836bfffffff8000000014c8c254c0000000000209a930100000002000000020000000064a6c6630000000064a6c6630000000064a6c662000000014b698f9900000000002093450000000064a6c6626023177780e93a95ae26ebff499904546d7b770954478630d536acfa060081272d9315a88f3019f8efa88dfe9c0f0843712da0bac814461e27733f6b83eb51b30000000030c89c59000000000004d3f5fffffff8000000003126dbae000000000004d02e0100000002000000020000000064a6c6630000000064a6c6630000000064a6c6630000000030c89c59000000000004d3f50000000064a6c663a477af5e3685676eb72696d6c8a124262eed369b2305ab902c64febbbee1b71a69b9ca2e7159fe570844c22bac849c490e0ddfd0349626c19fd7d65509e192a3000000000c092187000000000001bd4ffffffff8000000000c2e3596000000000001669c0100000002000000020000000064a6c6630000000064a6c6630000000064a6c662000000000c093851000000000001d4190000000064a6c662b8104aadc85157eadd671370cfdbe85ee370ef0e2ac0422b302890526096df1883be4ed61dd8a3518d198098ce37240c494710a7b9d85e35d9fceac21df089940000000025500cf900000000000626f9fffffff8000000002579e3aa000000000005dea40100000002000000020000000064a6c6630000000064a6c6630000000064a6c66300000000254fab51000000000005c5500000000064a6c663ff9b2f0b40487a69177a2760eb06dfc4a086792be9966e7fd18264f9be1e97e0997e0bf451cb36b4aea096e6b5c254d700922211dd933d9d17c467f0d6f3432100000002522218f7000000000039ff56fffffff8000000025b635c8800000000003512830100000002000000020000000064a6c6630000000064a6c6630000000064a6c66300000002521303f300000000002aea520000000064a6c663"];

    pool = await getPool();
    usdc = await ethers.getContractAt("MockToken", "0xC5463C3E462E730A7BF625569e96dD275D136D2d");
    wrapper = await getWrappedTokenGateway();
  });

  describe("Test pyth oracle", () => {
    it("User supply usdc", async () => {
      const userAddress = await user.getAddress();
      //  wrapper = await getWrappedTokenGateway();
      const pythOracle = await getPythOracle();

      const transfer = await user.sendTransaction({ to: pythOracle.address, value: parseEther("10") });

      await expect(
        wrapper
          .connect(user)
          .depositETH(pool.address, userAddress, 0, { value: parseEther("10") })
      ).to.emit(pool, "Supply");

      console.log("deposit");

      await usdc.connect(user).mint(user.getAddress(), parseEther("1"));
      const balance = await usdc.connect(user).balanceOf(user.getAddress());
      await usdc.connect(user).approve(pool.address, parseEther("10000"));

      await expect(await pool.connect(user).supply(
        usdc.address,
        parseEther("1"),
        userAddress,
        "0"
      )
      ).to.emit(pool, "Supply");

      console.log("supply")

    });

    it("User2 Borrow usdc", async () => {
      // supply to pool
      // console.log(priceFeedUpdateData)
      const pool = await getPool();
      await expect(
        wrapper
          .connect(user)
          .depositETH(pool.address, await user2.getAddress(), 0, { value: parseEther("1000") })
      ).to.emit(pool, "Supply");

      console.log("deposit");

      await expect(await pool.connect(user2).borrow(
        usdc.address,
        "1000000",
        2,
        0,
        await user2.getAddress(),
        priceFeedUpdateData
      )
      ).to.emit(pool, "Borrow");
      console.log("Borrow")
    })

    it("User2 Repay usdc", async () => {

      await usdc.connect(user2).approve(pool.address, parseEther("100"));

      await expect(await pool.connect(user2).repay(
        usdc.address,
        "1000000",
        2,
        await user2.getAddress()
      )
      ).to.emit(pool, "Repay");
      console.log("Repay");
    });

    it("User1 withdraw usdc and ETH", async () => {

      const weth = WRAPPED_NATIVE_TOKEN_PER_NETWORK["mantleTestnet"];

      const aTokenAddress = (await pool.getReserveData(weth)).aTokenAddress;

      const aToken = await getAToken(aTokenAddress);

      await aToken.connect(user).approve(wrapper.address, parseEther("1000"));

      await expect(await pool.connect(user).withdraw(
        usdc.address,
        parseEther("1"),
        await user.getAddress(),
        priceFeedUpdateData
      )
      ).to.emit(pool, "Withdraw")

      console.log("Withdraw");

      await expect(await wrapper.connect(user).withdrawETH(
        ZERO_ADDRESS,
        parseEther('10'),
        user.getAddress()
      )
      ).to.emit(pool, "Withdraw")
      console.log("withdraw")

    })


  });

  // describe("Perform user actions", () => {
  //   it("Supply WETH via WrappedTokenGateway", async () => {
  //     const deployer = await getFirstSigner();
  //     const [, , user] = await getEthersSigners();
  //     const userAddress = await user.getAddress();
  //     const wrapper = await getWrappedTokenGateway();
  //     const pool = await getPool();

  //     await expect(
  //       wrapper
  //         .connect(user)
  //         .depositETH(ZERO_ADDRESS, userAddress, 0, { value: oneEther })
  //     ).to.emit(pool, "Supply");

  //     await expect(
  //       wrapper.depositETH(ZERO_ADDRESS, await deployer.getAddress(), 0, {
  //         value: parseEther("100"),
  //       })
  //     ).to.emit(pool, "Supply");
  //   });
  //   it("Borrow WETH variable debt via WrappedTokenGateway", async () => {
  //     const [, , user] = await getEthersSigners();
  //     const wrapper = await getWrappedTokenGateway();
  //     const pool = await getPool();
  //     const weth = WRAPPED_NATIVE_TOKEN_PER_NETWORK["arbitrumGoerli"];
  //     const data = await pool.getReserveData(weth);
  //     const borrowSize = oneEther.div(4);
  //     const debtToken = await hre.ethers.getContractAt(
  //       "VariableDebtToken",
  //       data.variableDebtTokenAddress
  //     );
  //     await waitForTx(
  //       await debtToken
  //         .connect(user)
  //         .approveDelegation(wrapper.address, borrowSize)
  //     );
  //     await expect(
  //       wrapper.connect(user).borrowETH(ZERO_ADDRESS, borrowSize, 2, 0)
  //     ).to.emit(pool, "Borrow");
  //   });
  //   it("Repay WETH variable debt via WrappedTokenGateway", async () => {
  //     const [, , user] = await getEthersSigners();
  //     const userAddress = await user.getAddress();
  //     const wrapper = await getWrappedTokenGateway();
  //     const pool = await getPool();
  //     const weth = WRAPPED_NATIVE_TOKEN_PER_NETWORK["arbitrumGoerli"];
  //     const data = await pool.getReserveData(weth);

  //     await expect(
  //       wrapper
  //         .connect(user)
  //         .repayETH(ZERO_ADDRESS, oneEther.div(4), 2, userAddress, {
  //           value: oneEther.div(4),
  //         })
  //     ).to.emit(pool, "Repay");
  //   });
  // });
});
